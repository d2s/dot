#!/bin/zsh

# -----------------------------------------------------------
# VARIABLES
# -----------------------------------------------------------
# Debug mode (true / false)
# DEBUG=true
DEBUG=false

# -----------------------------------------------------------
# Disable: Node Version Manager (true / false)
# DISABLE_NVM=false
DISABLE_NVM=true

# -----------------------------------------------------------
# Identify operating system and machine type
OS=`uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export OS

OSVERSION=`uname -r`;
OSVERSION=`expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)'`
export OSVERSION

MACHINE=`uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export MACHINE

PLATFORM="$MACHINE-$OS-$OSVERSION"
export PLATFORM


# -----------------------------------------------------------
# Check what Linux distribution you are using
if [[ "$OSTYPE" == *linux* ]]; then
  CHECK_DISTRIBUTION=`cat /etc/*release | grep -w 'NAME='`

  # Compare command output to check if it includes text string
  if [[ "$CHECK_DISTRIBUTION" == *Debian* ]]; then
    DISTRIBUTION="Debian"
  elif [[ "$CHECK_DISTRIBUTION" == *openSUSE* ]]; then
    DISTRIBUTION="openSUSE"
  fi

  # Export system-specific value based on the operating system
  export DISTRIBUTION
fi


# -----------------------------------------------------------
# Private configs
#
# Use `.localrc` for system-specific configs
# that you don't want in your public, versioned repo.
#
# Another use case is to override variables on a per-system basis:
#   DISABLE_NVM=false
# -----------------------------------------------------------
# shellcheck disable=SC1090
[ -f ~/.localrc.sh ] && . ~/.localrc.sh


# -----------------------------------------------------------
# Define reusable values
# -----------------------------------------------------------

# -----------------------------------------------------------
# Linux related variables
# -----------------------------------------------------------
# If `$OSTYPE` variable string includes word `linux`
if [[ "$OSTYPE" == *linux* ]]; then
  export SYSTEMTYPE="linux"
fi

# -----------------------------------------------------------
# macOS related variables
# -----------------------------------------------------------
# If `$OSTYPE` variable string includes word `darwin`
if [[ "$OSTYPE" == *darwin* ]]; then
  export SYSTEMTYPE="darwin"
fi


# -----------------------------------------------------------
# shortcut to dotfiles path is $ZSH
export ZSH="$HOME/.dotfiles"

# -----------------------------------------------------------
# PROJECTS folder
if [ -d "$HOME/Documents/git" ]; then
  export PROJECTS="$HOME/Documents/git"
fi

# -----------------------------------------------------------
# default text editor
export EDITOR="vim"
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR


# -----------------------------------------------------------
# Debugging output
if [ $DEBUG = "true" ] ; then
  # Print details about the system
  echo "PLATFORM: $PLATFORM"
  # echo "EDITOR: $EDITOR"
fi


# -----------------------------------------------------------
# zplugin
# - https://github.com/zdharma/zplugin#option-2---manual-installation

# initial Zplugin's hash definition, if configuring before loading Zplugin, and then:
declare -A ZPLGM
ZPLGM[BIN_DIR]="$ZSH/zplugin/bin"
ZPLGM[PLUGINS_DIR]="$ZSH/zsh/zplugin/plugins"
ZPLGM[COMPLETIONS_DIR]="$ZSH/zsh/zplugin/root_completions"
ZPLGM[SNIPPETS_DIR]="$ZSH/zsh/zplugin/snippets"
ZPFX="$ZSH/zsh/zplugin/polaris"

# Load zplugin itself
source "$ZSH/zsh/zplugin/bin/zplugin.zsh"

# Two regular plugins loaded without tracking.
zplugin light zsh-users/zsh-autosuggestions
zplugin light zdharma/fast-syntax-highlighting

# Plugin history-search-multi-word loaded with tracking.
# zplugin load zdharma/history-search-multi-word

# Load the pure theme, with zsh-async library that's bundled with it.
zplugin ice pick"async.zsh" src"pure.zsh"
zplugin light sindresorhus/pure


# -----------------------------------------------------------
# Homebrew/Linuxbrew package management configuration
if [ -f "$ZSH/zsh/brew.zsh" ]; then
  source "$ZSH/zsh/brew.zsh"
fi


# -----------------------------------------------------------
# Personal extensions

# all of our zsh files
#typeset -U config_files
#config_files=($ZSH/*/*.zsh)

# load the path files
#for file in ${(M)config_files:#*/path.zsh}; do
#  source "$file"
#done

# -----------------------------------------------------------
# Load partial Zsh configs from other files

# Aliases of directories for faster navigation
if [ -f "$ZSH/zsh/directories.zsh" ]; then
  source "$ZSH/zsh/directories.zsh"
fi

# Zsh aliases
if [ -f "$ZSH/zsh/aliases.zsh" ]; then
  source "$ZSH/zsh/aliases.zsh"
fi

# Zsh helper functions
if [ -f "$ZSH/zsh/helper-functions.zsh" ]; then
  source "$ZSH/zsh/helper-functions.zsh"
fi

# -----------------------------------------------------------
# File management aliases
if [ -f "$ZSH/zsh/file-management.zsh" ]; then
  source "$ZSH/zsh/file-management.zsh"
fi

# -----------------------------------------------------------
# Linux package management configs
# if [ "$OS" = "linux" ] ; then
if [[ "$OSTYPE" == *linux* ]]; then
  if [ -f "$ZSH/zsh/linux-package-management.zsh" ]; then
    source "$ZSH/zsh/linux-package-management.zsh"
  fi
fi

# -----------------------------------------------------------
# Search tools aliases
if [ -f "$ZSH/zsh/search.zsh" ]; then
  source "$ZSH/zsh/search.zsh"
fi

# -----------------------------------------------------------
# Key management configs
if [ -f "$ZSH/zsh/key-management.zsh" ]; then
  source "$ZSH/zsh/key-management.zsh"
fi

# -----------------------------------------------------------
# Git aliases
if [ -f "$ZSH/zsh/git.zsh" ]; then
  source "$ZSH/zsh/git.zsh"
fi

# -----------------------------------------------------------
# Clipboard aliases
if [ -f "$ZSH/zsh/clipboard.zsh" ]; then
  source "$ZSH/zsh/clipboard.zsh"
fi

# -----------------------------------------------------------
# Process management aliases
if [ -f "$ZSH/zsh/process-management.zsh" ]; then
  source "$ZSH/zsh/process-management.zsh"
fi

# -----------------------------------------------------------
# Node.js package management (npm, yarn)
if [ -f "$ZSH/zsh/node-package-management.zsh" ]; then
  source "$ZSH/zsh/node-package-management.zsh"
fi

# -----------------------------------------------------------
# D programming language configs
if [ -f "$ZSH/zsh/dlang.zsh" ]; then
  source "$ZSH/zsh/dlang.zsh"
fi

# -----------------------------------------------------------
# PHP related configs
if [ -f "$ZSH/zsh/php.zsh" ]; then
  source "$ZSH/zsh/php.zsh"
fi

# -----------------------------------------------------------
# Networking tools aliases
if [ -f "$ZSH/zsh/networking.zsh" ]; then
  source "$ZSH/zsh/networking.zsh"
fi

# -----------------------------------------------------------
# Docker related aliases
if [ -f "$ZSH/zsh/docker.zsh" ]; then
  source "$ZSH/zsh/docker.zsh"
fi


# -----------------------------------------------------------
# Add custom binaries from dotfiles to system PATH
if [ -d "$ZSH/bin" ]; then
  export PATH="$PATH:$ZSH/bin"
fi


# -----------------------------------------------------------
# System-wide local packages
# -----------------------------------------------------------
if [ -d "/usr/local/bin" ]; then
  export PATH="/usr/local/bin:$PATH"
fi

if [ -d "/usr/local/sbin" ]; then
  export PATH="/usr/local/sbin:$PATH"
fi


# -----------------------------------------------------------
# Rust related configs
if [ -f "$ZSH/zsh/rust.zsh" ]; then
  source "$ZSH/zsh/rust.zsh"
fi


# -----------------------------------------------------------
# Ruby related configs
if [ -f "$ZSH/zsh/ruby.zsh" ]; then
  source "$ZSH/zsh/ruby.zsh"
fi


# -----------------------------------------------------------
# For macOS systems
if [ "$OS" = "darwin" ] ; then
  # macOS related configs
  if [ -f "$ZSH/zsh/macos/macos.zsh" ]; then
    source "$ZSH/zsh/macos/macos.zsh"
  fi
fi


# -----------------------------------------------------------
# Tools located under home directory
if [ -d "$HOME/bin" ]; then
  export PATH="$HOME/bin:$PATH"
fi


# -----------------------------------------------------------
# `open` alias for Linux devices, to match the macOS feature
if [ "$SYSTEMTYPE" = "linux" ] ; then
  # Check if `open-cli` is available in the user's PATH
  if type -p open-cli &>/dev/null; then
    alias open="open-cli"
  fi
fi

