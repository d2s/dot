#!/bin/zsh

# -----------------------------------------------------------
# VARIABLES
# -----------------------------------------------------------
# Debug mode (true / false)
DEBUG=true
# DEBUG=false

# -----------------------------------------------------------
# Disable: Node Version Manager (true / false)
DISABLE_NVM=false
# DISABLE_NVM=true

# -----------------------------------------------------------
# Identify operating system and machine type
OS=`uname -s | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export OS

OSVERSION=`uname -r`;
OSVERSION=`expr "$OSVERSION" : '[^0-9]*\([0-9]*\.[0-9]*\)'`
export OSVERSION

MACHINE=`uname -m | sed -e 's/  */-/g;y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
export MACHINE

PLATFORM="$MACHINE-$OS-$OSVERSION"
export PLATFORM


# -----------------------------------------------------------
# Check what Linux distribution you are using
CHECK_DISTRIBUTION=`cat /etc/*release | grep -w 'NAME='`

# Compare command output to check if it includes text string
if [[ "$CHECK_DISTRIBUTION" == *Debian* ]]; then
  DISTRIBUTION="Debian"
elif [[ "$CHECK_DISTRIBUTION" == *openSUSE* ]]; then
  DISTRIBUTION="openSUSE"
fi

# Export system-specific value based on the operating system
export DISTRIBUTION


# -----------------------------------------------------------
# Define reusable values
# -----------------------------------------------------------

# -----------------------------------------------------------
# Linux related variables
# -----------------------------------------------------------
# If `$OSTYPE` variable string includes word `linux`
if [[ "$OSTYPE" == *linux* ]]; then
  export SYSTEMTYPE="linux"
fi

# -----------------------------------------------------------
# macOS related variables
# -----------------------------------------------------------
# If `$OSTYPE` variable string includes word `darwin`
if [[ "$OSTYPE" == *darwin* ]]; then
  export SYSTEMTYPE="darwin"
fi


# -----------------------------------------------------------
# shortcut to dotfiles path is $ZSH
export ZSH="$HOME/.dotfiles"

# -----------------------------------------------------------
# PROJECTS folder
if [ -d "$HOME/Documents/git" ]; then
  export PROJECTS="$HOME/Documents/git"
fi

# -----------------------------------------------------------
# default text editor
export EDITOR="vim"
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR


# -----------------------------------------------------------
# Debugging output
if [ $DEBUG = "true" ] ; then
  # Print details about the system
  echo "PLATFORM: $PLATFORM"
  # echo "EDITOR: $EDITOR"
fi


# -----------------------------------------------------------
# zplugin
# - https://github.com/zdharma/zplugin#option-2---manual-installation

# initial Zplugin's hash definition, if configuring before loading Zplugin, and then:
declare -A ZPLGM
ZPLGM[BIN_DIR]="$ZSH/zplugin/bin"
ZPLGM[PLUGINS_DIR]="$ZSH/zsh/zplugin/plugins"
ZPLGM[COMPLETIONS_DIR]="$ZSH/zsh/zplugin/root_completions"
ZPLGM[SNIPPETS_DIR]="$ZSH/zsh/zplugin/snippets"
ZPFX="$ZSH/zsh/zplugin/polaris"

# Load zplugin itself
source "$ZSH/zsh/zplugin/bin/zplugin.zsh"

# Two regular plugins loaded without tracking.
zplugin light zsh-users/zsh-autosuggestions
zplugin light zdharma/fast-syntax-highlighting

# Plugin history-search-multi-word loaded with tracking.
# zplugin load zdharma/history-search-multi-word

# Load the pure theme, with zsh-async library that's bundled with it.
zplugin ice pick"async.zsh" src"pure.zsh"
zplugin light sindresorhus/pure


# -----------------------------------------------------------
# Homebrew

DIRECTORY_LINUXBREW="/home/linuxbrew/.linuxbrew"
DIRECTORY_LINUXBREW_BIN="$DIRECTORY_LINUXBREW/bin"

if [ -d "$DIRECTORY_LINUXBREW_BIN" ]; then
  # eval \$($(brew --prefix)/bin/brew shellenv)
  # eval \$(($DIRECTORY_LINUXBREW_BIN)/brew shellenv)
  #export PATH="$PATH:$DIRECTORY_LINUXBREW_BIN"
  export PATH="$DIRECTORY_LINUXBREW_BIN:$PATH"
fi


# - https://github.com/drduh/macOS-Security-and-Privacy-Guide#homebrew
# Check if `brew` is available in the user's PATH
if type -p brew &>/dev/null; then
  export HOMEBREW_NO_ANALYTICS=1
  export HOMEBREW_NO_INSECURE_REDIRECT=1
  export HOMEBREW_CASK_OPTS=--require-sha
fi


# -----------------------------------------------------------
# Personal extensions

# all of our zsh files
#typeset -U config_files
#config_files=($ZSH/*/*.zsh)

# load the path files
#for file in ${(M)config_files:#*/path.zsh}; do
#  source "$file"
#done

# -----------------------------------------------------------
# Load custom ZSH configs
if [ -f "$ZSH/zsh/aliases.zsh" ]; then
  source "$ZSH/zsh/aliases.zsh"
fi


if [ -f "$ZSH/zsh/helper-functions.zsh" ]; then
  source "$ZSH/zsh/helper-functions.zsh"
fi



# -----------------------------------------------------------
# Adjust paths to software tools
# -----------------------------------------------------------

# if [ "$OS" = "linux" ] ; then
if [[ "$OSTYPE" == *linux* ]]; then
  # Add custom binaries from Snapcraft https://snapcraft.io/ to PATH
  if [ -d "/snap/bin" ]; then
    export PATH="$PATH:/snap/bin"
  fi
fi


# -----------------------------------------------------------
# Add custom binaries from dotfiles to system PATH
if [ -d "$ZSH/bin" ]; then
  export PATH="$PATH:$ZSH/bin"
fi


# -----------------------------------------------------------
if [ -d "/usr/local/bin" ]; then
  export PATH="/usr/local/bin:$PATH"
fi

# -----------------------------------------------------------
# Rust installer & package manager
if [ -d "$HOME/.cargo/bin" ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi


# -----------------------------------------------------------
# For macOS systems
if [ "$OS" = "darwin" ] ; then
  # Load ZSH aliases for macOS related tools
  if [ -f "$ZSH/macos/crashlogs.zsh" ]; then
    source "$ZSH/macos/crashlogs.zsh"
  fi

  # PHP from Homebrew package manager
  if [ -d /usr/local/opt/php@7.1/bin ]; then
    export PATH="/usr/local/opt/php@7.1/bin:$PATH"
  fi

  if [ -d /usr/local/opt/php@7.1/sbin ]; then
    export PATH="/usr/local/opt/php@7.1/sbin:$PATH"
  fi

  # Python 3.6
  # - Add binaries installed with pip3 to the PATH
  if [ -d "$HOME/Library/Python/3.6/bin" ]; then
    export PATH="$HOME/Library/Python/3.6/bin:$PATH"
  fi

  # iTerm2 shell integration
  if [ -f "${HOME}/.iterm2_shell_integration.zsh" ]; then
    source "${HOME}/.iterm2_shell_integration.zsh"
  fi
fi


# -----------------------------------------------------------
# PHP Composer and other tools located under bin directory
if [ -d "$HOME/bin" ]; then
  export PATH="$HOME/bin:$PATH"
fi

# PHP Composer global packages
if [ -d "$HOME/.composer/vendor/bin" ]; then
  export PATH="$HOME/.composer/vendor/bin:$PATH"
fi


# -----------------------------------------------------------
if [ -d "/usr/local/sbin" ]; then
  export PATH="/usr/local/sbin:$PATH"
fi


# -----------------------------------------------------------
# hub
# -----------------------------------------------------------
# Check if `hub` is available in the user's PATH
if type -p hub &>/dev/null; then
  # Wrap git automatically
  eval "$(hub alias -s)"
fi


# -----------------------------------------------------------
# GPG
# -----------------------------------------------------------
# Check if `gpg` is available in the user's PATH
if type -p gpg &>/dev/null; then
  # - https://help.github.com/en/articles/telling-git-about-your-signing-key
  export GPG_TTY=$TTY
fi


# -----------------------------------------------------------
# nvm (Node Version Manager)
# - https://github.com/creationix/nvm
#
# TODO: look at https://github.com/nodenv/nodenv/wiki/Alternatives
#
# Note that loading nvm makes starting new shell much slower!

if [ $DISABLE_NVM = "false" ] ; then
  if [ -d "$HOME/.nvm" ]; then
    # export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    export NVM_DIR="$HOME/.nvm"

    # This loads nvm
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

    # This loads nvm bash_completion
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  fi
fi


# -----------------------------------------------------------
# Yarn
# -----------------------------------------------------------
# Check if `yarn` is available in the user's PATH
if type -p yarn &>/dev/null; then
  # Add the install location of global binaries to your PATH
  # More details: https://yarnpkg.com/en/docs/cli/global
  export PATH="$(yarn global bin):$PATH"
fi



# -----------------------------------------------------------
# `open` alias for Linux devices, to match the macOS feature
if [ "$SYSTEMTYPE" = "linux" ] ; then
  # Check if `open-cli` is available in the user's PATH
  if type -p open-cli &>/dev/null; then
    alias open="open-cli"
  fi
fi



# -----------------------------------------------------------
# WordPress CLI autocomplete
# More details: https://make.wordpress.org/cli/handbook/installing/
#source "$ZSH/zsh/autocomplete/wp-completion.bash"


# -----------------------------------------------------------
# Private configs
# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
# shellcheck disable=SC1090
[ -f ~/.localrc ] && . ~/.localrc
